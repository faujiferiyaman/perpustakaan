/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tubes.perpus;

import java.sql.Connection;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Unknown
 */
public class mainMenuEmployee extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public mainMenuEmployee() {
        initComponents();
        loadMemberTable();
        loadBookTable();
        loadCategoryTable();
        loadEmployeeTable();
        loadBorrowTable();
        loadPublisherTable();
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screen.width, screen.height);
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }

    public static boolean edit = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        heading = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnBorrow = new javax.swing.JLabel();
        btnBook = new javax.swing.JLabel();
        btnMember = new javax.swing.JLabel();
        btnEmployee = new javax.swing.JLabel();
        btnPublisher = new javax.swing.JLabel();
        btnCategory = new javax.swing.JLabel();
        searchPanel = new javax.swing.JPanel();
        search = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        userName = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnDone = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        borrow = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBorrow = new javax.swing.JTable();
        book = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBook = new javax.swing.JTable();
        member = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableMember = new javax.swing.JTable();
        employee = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableEmployee = new javax.swing.JTable();
        publisher = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablePublisher = new javax.swing.JTable();
        category = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableCategory = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        heading.setBackground(new java.awt.Color(74, 209, 161));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo.png"))); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        btnBorrow.setBackground(new java.awt.Color(0, 187, 150));
        btnBorrow.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBorrow.setForeground(new java.awt.Color(255, 255, 255));
        btnBorrow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnBorrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/schedule.png"))); // NOI18N
        btnBorrow.setText("Peminjaman");
        btnBorrow.setOpaque(true);
        btnBorrow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBorrowMouseClicked(evt);
            }
        });

        btnBook.setBackground(new java.awt.Color(74, 209, 161));
        btnBook.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBook.setForeground(new java.awt.Color(255, 255, 255));
        btnBook.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buku.png"))); // NOI18N
        btnBook.setText("Buku");
        btnBook.setOpaque(true);
        btnBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBookMouseClicked(evt);
            }
        });

        btnMember.setBackground(new java.awt.Color(74, 209, 161));
        btnMember.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnMember.setForeground(new java.awt.Color(255, 255, 255));
        btnMember.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnMember.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/member.png"))); // NOI18N
        btnMember.setText("Member");
        btnMember.setOpaque(true);
        btnMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMemberMouseClicked(evt);
            }
        });

        btnEmployee.setBackground(new java.awt.Color(74, 209, 161));
        btnEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEmployee.setForeground(new java.awt.Color(255, 255, 255));
        btnEmployee.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnEmployee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/employee.png"))); // NOI18N
        btnEmployee.setText("Pegawai");
        btnEmployee.setOpaque(true);
        btnEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEmployeeMouseClicked(evt);
            }
        });

        btnPublisher.setBackground(new java.awt.Color(74, 209, 161));
        btnPublisher.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnPublisher.setForeground(new java.awt.Color(255, 255, 255));
        btnPublisher.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnPublisher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/publisher.png"))); // NOI18N
        btnPublisher.setText("Penerbit");
        btnPublisher.setOpaque(true);
        btnPublisher.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPublisherMouseClicked(evt);
            }
        });

        btnCategory.setBackground(new java.awt.Color(74, 209, 161));
        btnCategory.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCategory.setForeground(new java.awt.Color(255, 255, 255));
        btnCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/category.png"))); // NOI18N
        btnCategory.setText("Kategori");
        btnCategory.setOpaque(true);
        btnCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCategoryMouseClicked(evt);
            }
        });

        search.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 3, 1, 3));

        btnSearch.setBackground(new java.awt.Color(87, 101, 116));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(74, 209, 161));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        btnSearch.setBorderPainted(false);
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSearchMouseExited(evt);
            }
        });
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(btnSearch))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnLogout.setBackground(new java.awt.Color(87, 101, 116));
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setText("Logout");
        btnLogout.setBorderPainted(false);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        userName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        userName.setForeground(new java.awt.Color(255, 255, 255));
        userName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userName.setText("Nama Pegawai");
        userName.setPreferredSize(new java.awt.Dimension(79, 30));

        javax.swing.GroupLayout headingLayout = new javax.swing.GroupLayout(heading);
        heading.setLayout(headingLayout);
        headingLayout.setHorizontalGroup(
            headingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headingLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(headingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(headingLayout.createSequentialGroup()
                        .addComponent(btnBorrow, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnMember, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addComponent(btnCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 255, Short.MAX_VALUE)
                .addGroup(headingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(headingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(userName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLogout, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)))
                .addContainerGap())
        );
        headingLayout.setVerticalGroup(
            headingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headingLayout.createSequentialGroup()
                .addGroup(headingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headingLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnLogout))
                    .addGroup(headingLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(headingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBorrow, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnMember, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBackground(new java.awt.Color(87, 101, 116));

        btnAdd.setBackground(new java.awt.Color(74, 209, 161));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        btnAdd.setText("Tambah");
        btnAdd.setBorderPainted(false);
        btnAdd.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnAdd.setPreferredSize(new java.awt.Dimension(97, 35));
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddMouseExited(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(74, 209, 161));
        btnEdit.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png"))); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.setBorderPainted(false);
        btnEdit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEdit.setPreferredSize(new java.awt.Dimension(97, 35));
        btnEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEditMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnEditMouseExited(evt);
            }
        });
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(74, 209, 161));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        btnDelete.setText("Hapus ");
        btnDelete.setBorderPainted(false);
        btnDelete.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDelete.setPreferredSize(new java.awt.Dimension(97, 35));
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDeleteMouseExited(evt);
            }
        });
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnDone.setBackground(new java.awt.Color(74, 209, 161));
        btnDone.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        btnDone.setForeground(new java.awt.Color(255, 255, 255));
        btnDone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/done.png"))); // NOI18N
        btnDone.setText("Selesai");
        btnDone.setBorderPainted(false);
        btnDone.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDone.setPreferredSize(new java.awt.Dimension(97, 35));
        btnDone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDoneMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDoneMouseExited(evt);
            }
        });
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(74, 209, 161));
        btnRefresh.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/refresh.png"))); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.setBorderPainted(false);
        btnRefresh.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnRefresh.setPreferredSize(new java.awt.Dimension(97, 35));
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRefreshMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRefreshMouseExited(evt);
            }
        });
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 187, 150));

        jPanel1.setLayout(new java.awt.CardLayout());

        borrow.setBackground(new java.awt.Color(255, 255, 255));
        borrow.setLayout(new javax.swing.BoxLayout(borrow, javax.swing.BoxLayout.LINE_AXIS));

        tableBorrow.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableBorrow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableBorrow.setGridColor(new java.awt.Color(240, 240, 240));
        tableBorrow.setSelectionBackground(new java.awt.Color(29, 209, 161));
        jScrollPane1.setViewportView(tableBorrow);

        borrow.add(jScrollPane1);

        jPanel1.add(borrow, "card2");

        book.setLayout(new javax.swing.BoxLayout(book, javax.swing.BoxLayout.LINE_AXIS));

        tableBook.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null},
                {"", null, null, null},
                {"", null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableBook.setGridColor(new java.awt.Color(240, 240, 240));
        tableBook.setSelectionBackground(new java.awt.Color(29, 209, 161));
        jScrollPane2.setViewportView(tableBook);

        book.add(jScrollPane2);

        jPanel1.add(book, "card3");

        member.setBackground(new java.awt.Color(255, 255, 255));
        member.setLayout(new javax.swing.BoxLayout(member, javax.swing.BoxLayout.LINE_AXIS));

        tableMember.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableMember.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMember.setGridColor(new java.awt.Color(240, 240, 240));
        tableMember.setSelectionBackground(new java.awt.Color(29, 209, 161));
        jScrollPane4.setViewportView(tableMember);

        member.add(jScrollPane4);

        jPanel1.add(member, "card2");

        employee.setBackground(new java.awt.Color(255, 255, 255));
        employee.setLayout(new javax.swing.BoxLayout(employee, javax.swing.BoxLayout.LINE_AXIS));

        tableEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableEmployee.setGridColor(new java.awt.Color(240, 240, 240));
        tableEmployee.setSelectionBackground(new java.awt.Color(29, 209, 161));
        jScrollPane3.setViewportView(tableEmployee);

        employee.add(jScrollPane3);

        jPanel1.add(employee, "card2");

        publisher.setBackground(new java.awt.Color(255, 255, 255));
        publisher.setLayout(new javax.swing.BoxLayout(publisher, javax.swing.BoxLayout.LINE_AXIS));

        tablePublisher.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tablePublisher.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablePublisher.setGridColor(new java.awt.Color(240, 240, 240));
        tablePublisher.setSelectionBackground(new java.awt.Color(29, 209, 161));
        jScrollPane5.setViewportView(tablePublisher);

        publisher.add(jScrollPane5);

        jPanel1.add(publisher, "card2");

        category.setBackground(new java.awt.Color(87, 101, 116));
        category.setForeground(new java.awt.Color(255, 255, 255));
        category.setLayout(new javax.swing.BoxLayout(category, javax.swing.BoxLayout.LINE_AXIS));

        tableCategory.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableCategory.setGridColor(new java.awt.Color(240, 240, 240));
        tableCategory.setSelectionBackground(new java.awt.Color(29, 209, 161));
        jScrollPane6.setViewportView(tableCategory);

        category.add(jScrollPane6);

        jPanel1.add(category, "card2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1055, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .addComponent(btnDone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 75, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(heading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBorrowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBorrowMouseClicked
        newcolor(btnBorrow);
        resetcolor(btnBook);
        resetcolor(btnMember);
        resetcolor(btnEmployee);
        resetcolor(btnCategory);
        resetcolor(btnPublisher);
        borrow.setVisible(true);
        publisher.setVisible(false);
        book.setVisible(false);
        member.setVisible(false);
        employee.setVisible(false);
        category.setVisible(false);
        btnDone.setEnabled(true);
        btnEdit.setEnabled(true);
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_btnBorrowMouseClicked

    private void btnBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBookMouseClicked
        newcolor(btnBook);
        resetcolor(btnCategory);
        resetcolor(btnBorrow);
        resetcolor(btnMember);
        resetcolor(btnPublisher);
        resetcolor(btnEmployee);
        book.setVisible(true);
        publisher.setVisible(false);
        borrow.setVisible(false);
        member.setVisible(false);
        employee.setVisible(false);
        category.setVisible(false);
        btnDone.setEnabled(false);
        btnEdit.setEnabled(true);
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_btnBookMouseClicked

    private void btnEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEmployeeMouseClicked
        newcolor(btnEmployee);
        resetcolor(btnBorrow);
        resetcolor(btnCategory);
        resetcolor(btnMember);
        resetcolor(btnPublisher);
        resetcolor(btnBook);
        publisher.setVisible(false);
        employee.setVisible(true);
        borrow.setVisible(false);
        member.setVisible(false);
        book.setVisible(false);
        category.setVisible(false);
        btnDone.setEnabled(false);
        btnEdit.setEnabled(true);
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_btnEmployeeMouseClicked

    private void btnMemberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMemberMouseClicked
        newcolor(btnMember);
        resetcolor(btnCategory);
        resetcolor(btnPublisher);
        resetcolor(btnBorrow);
        resetcolor(btnBook);
        resetcolor(btnEmployee);
        publisher.setVisible(false);
        member.setVisible(true);
        borrow.setVisible(false);
        book.setVisible(false);
        employee.setVisible(false);
        category.setVisible(false);
        btnDone.setEnabled(false);
        btnEdit.setEnabled(true);
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_btnMemberMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (member.isVisible() && !tableMember.getSelectionModel().isSelectionEmpty()) {
            Integer id = null;
            int tabelData = tableMember.getSelectedRow();
            Integer employeeId = Integer.parseInt(tableMember.getValueAt(tabelData, 0).toString());
            String sql = "SELECT * FROM members"
                    + " WHERE id = '" + employeeId + "'";

            try {
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.Statement stm = conn.createStatement();
                java.sql.ResultSet res = stm.executeQuery(sql);
                while (res.next()) {
                    id = res.getInt("user_id");
                }

                sql = "DELETE FROM users WHERE id =" + Integer.toString(id);
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.execute();
            } catch (SQLException e) {
            }
            loadMemberTable();
        } else if (borrow.isVisible() && !tableBorrow.getSelectionModel().isSelectionEmpty()) {
            String sql = "DELETE FROM borrows WHERE id=?";
            int tabelData = tableBorrow.getSelectedRow();
            try {
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.setString(1, tableBorrow.getValueAt(tabelData, 0).toString());
                pst.execute();
                JOptionPane.showMessageDialog(this, "Data berhasil di hapus");
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            loadBorrowTable();
        } else if (publisher.isVisible() && !tablePublisher.getSelectionModel().isSelectionEmpty()) {
            String sql = "DELETE FROM publishers WHERE id=?";
            int tabelData = tablePublisher.getSelectedRow();
            try {
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.setString(1, tablePublisher.getValueAt(tabelData, 0).toString());
                pst.execute();
                JOptionPane.showMessageDialog(this, "Data berhasil di hapus");
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            loadPublisherTable();
        } else if (book.isVisible() && !tableBook.getSelectionModel().isSelectionEmpty()) {
            String sql = "DELETE FROM books WHERE id=?";
            int tabelData = tableBook.getSelectedRow();
            try {
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.setString(1, tableBook.getValueAt(tabelData, 0).toString());
                pst.execute();
                JOptionPane.showMessageDialog(this, "Data berhasil di hapus");
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            loadBookTable();
        } else if (category.isVisible() && !tableCategory.getSelectionModel().isSelectionEmpty()) {
            String sql = "DELETE FROM categories WHERE id=?";
            int tabelData = tableCategory.getSelectedRow();
            try {
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.setString(1, tableCategory.getValueAt(tabelData, 0).toString());
                pst.execute();
                JOptionPane.showMessageDialog(this, "Data berhasil di hapus");
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            loadCategoryTable();
        } else if (employee.isVisible() && !tableEmployee.getSelectionModel().isSelectionEmpty()) {
            Integer id = null;
            int tabelData = tableEmployee.getSelectedRow();
            Integer employeeId = Integer.parseInt(tableEmployee.getValueAt(tabelData, 0).toString());
            String sql = "SELECT * FROM employees"
                    + " WHERE id = '" + employeeId + "'";

            try {
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.Statement stm = conn.createStatement();
                java.sql.ResultSet res = stm.executeQuery(sql);
                while (res.next()) {
                    id = res.getInt("user_id");
                }

                sql = "DELETE FROM users WHERE id =" + Integer.toString(id);
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.execute();
            } catch (SQLException e) {
            }
            loadEmployeeTable();
        } else {
            JOptionPane.showMessageDialog(null, "Tidak ada data yang dipilih");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        edit = false;
        if (member.isVisible())
            new formMember().setVisible(true);
        else if (borrow.isVisible()) {
            formBorrow fBr = new formBorrow();
            fBr.employeeId = (employeeId);
            fBr.setVisible(true);
        } else if (book.isVisible())
            new formBook().setVisible(true);
        else if (employee.isVisible())
            new formEmployee().setVisible(true);
        else if (publisher.isVisible())
            new formPublisher().setVisible(true);
        else if (category.isVisible())
            new formCategory().setVisible(true);
        else
            System.out.print("Tidak bisa membuka");
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        if (member.isVisible())
            loadMemberTable();
        else if (borrow.isVisible())
            loadBorrowTable();
        else if (book.isVisible())
            loadBookTable();
        else if (employee.isVisible())
            loadEmployeeTable();
        else if (publisher.isVisible())
            loadPublisherTable();
        else if (category.isVisible())
            loadCategoryTable();
        else
            System.out.print("Tidak bisa membuka");
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        edit = true;
        if (member.isVisible() && !tableMember.getSelectionModel().isSelectionEmpty()) {
            Integer id = null;
            formMember fM = new formMember();
            fM.setVisible(true);
            int tabelData = tableMember.getSelectedRow();
            fM.memberId = (Integer.parseInt(tableMember.getValueAt(tabelData, 0).toString()));

            try {
                String sql = "SELECT * FROM members"
                        + " WHERE id = '" + fM.memberId + "'";
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.Statement stm = conn.createStatement();
                java.sql.ResultSet res = stm.executeQuery(sql);
                while (res.next()) {
                    id = res.getInt("user_id");
                }
            } catch (SQLException e) {
            }

            fM.id = (id);
            fM.name = (tableMember.getValueAt(tabelData, 1).toString());
            fM.email = (tableMember.getValueAt(tabelData, 2).toString());
            fM.phone = (tableMember.getValueAt(tabelData, 3).toString());
            fM.address = (tableMember.getValueAt(tabelData, 4).toString());
            fM.viewData();
        } else if (borrow.isVisible() && !tableBorrow.getSelectionModel().isSelectionEmpty()) {
            Integer bookId = null, memberId = null;

            formBorrow fBr = new formBorrow();
            fBr.setVisible(true);
            int tabelData = tableBorrow.getSelectedRow();
            fBr.id = (Integer.parseInt(tableBorrow.getValueAt(tabelData, 0).toString()));

            try {
                String sql = "SELECT * FROM borrows WHERE id='" + fBr.id + "'";
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.Statement stm = conn.createStatement();
                java.sql.ResultSet res = stm.executeQuery(sql);
                while (res.next()) {
                    bookId = res.getInt("book_id");
                    memberId = res.getInt("member_id");
                }
            } catch (SQLException e) {
            }

            fBr.bookId = (bookId);
            fBr.memberId = (memberId);
            fBr.employeeId = (employeeId);
            fBr.viewData();
        } else if (book.isVisible() && !tableBook.getSelectionModel().isSelectionEmpty()) {
            Integer publisherId = null, categoryId = null;
            formBook fB = new formBook();
            fB.setVisible(true);
            int tabelData = tableBook.getSelectedRow();
            fB.id = (Integer.parseInt(tableBook.getValueAt(tabelData, 0).toString()));

            try {
                String sql = "SELECT * FROM books "
                        + " WHERE id = '" + fB.id + "'";
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.Statement stm = conn.createStatement();
                java.sql.ResultSet res = stm.executeQuery(sql);
                while (res.next()) {
                    publisherId = res.getInt("publisher_id");
                    categoryId = res.getInt("category_id");
                }
            } catch (SQLException e) {
            }

            fB.title = (tableBook.getValueAt(tabelData, 1).toString());
            fB.publisherId = (publisherId);
            fB.author = (tableBook.getValueAt(tabelData, 3).toString());
            fB.year = (Integer.parseInt(tableBook.getValueAt(tabelData, 4).toString()));
            fB.categoryId = (categoryId);
            fB.qty = (Integer.parseInt(tableBook.getValueAt(tabelData, 6).toString()));
            fB.viewData();
        } else if (employee.isVisible() && !tableEmployee.getSelectionModel().isSelectionEmpty()) {
            Integer id = null;
            formEmployee fE = new formEmployee();
            fE.setVisible(true);
            int tabelData = tableEmployee.getSelectedRow();
            fE.employeeId = (Integer.parseInt(tableEmployee.getValueAt(tabelData, 0).toString()));

            try {
                String sql = "SELECT * FROM employees"
                        + " WHERE id = '" + fE.employeeId + "'";
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.Statement stm = conn.createStatement();
                java.sql.ResultSet res = stm.executeQuery(sql);
                while (res.next()) {
                    id = res.getInt("user_id");
                }
            } catch (SQLException e) {
            }

            fE.id = (id);
            fE.name = (tableEmployee.getValueAt(tabelData, 1).toString());
            fE.email = (tableEmployee.getValueAt(tabelData, 2).toString());
            fE.phone = (tableEmployee.getValueAt(tabelData, 3).toString());
            fE.address = (tableEmployee.getValueAt(tabelData, 4).toString());
            fE.viewData();
        } else if (publisher.isVisible() && !tablePublisher.getSelectionModel().isSelectionEmpty()) {
            formPublisher fP = new formPublisher();
            fP.setVisible(true);
            int tabelData = tablePublisher.getSelectedRow();
            fP.id = (Integer.parseInt(tablePublisher.getValueAt(tabelData, 0).toString()));
            fP.name = (tablePublisher.getValueAt(tabelData, 1).toString());
            fP.address = (tablePublisher.getValueAt(tabelData, 2).toString());
            fP.phone = (tablePublisher.getValueAt(tabelData, 3).toString());
            fP.viewData();
        } else if (category.isVisible() && !tableCategory.getSelectionModel().isSelectionEmpty()) {
            formCategory fC = new formCategory();
            fC.setVisible(true);
            int tabelData = tableCategory.getSelectedRow();
            fC.id = (Integer.parseInt(tableCategory.getValueAt(tabelData, 0).toString()));
            fC.name = (tableCategory.getValueAt(tabelData, 1).toString());
            fC.viewData();
        } else {
            JOptionPane.showMessageDialog(null, "Tidak ada data yang dipilih");
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseEntered
        hovercolor(btnAdd);
    }//GEN-LAST:event_btnAddMouseEntered

    private void btnAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseExited
        defaultcolor(btnAdd);
    }//GEN-LAST:event_btnAddMouseExited

    private void btnEditMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditMouseEntered
        hovercolor(btnEdit);
    }//GEN-LAST:event_btnEditMouseEntered

    private void btnEditMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditMouseExited
        defaultcolor(btnEdit);
    }//GEN-LAST:event_btnEditMouseExited

    private void btnDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseEntered
        hovercolor(btnDelete);
    }//GEN-LAST:event_btnDeleteMouseEntered

    private void btnDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseExited
        defaultcolor(btnDelete);
    }//GEN-LAST:event_btnDeleteMouseExited

    private void btnRefreshMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseEntered
        hovercolor(btnRefresh);
    }//GEN-LAST:event_btnRefreshMouseEntered

    private void btnRefreshMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseExited
        defaultcolor(btnRefresh);
    }//GEN-LAST:event_btnRefreshMouseExited

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (member.isVisible()) {
            searchMember();
        } else if (book.isVisible()) {
            searchBook();
        } else if (borrow.isVisible()) {
            searchBorrow();
        } else if (publisher.isVisible()) {
            searchPublisher();
        } else if (category.isVisible()) {
            searchCategory();
        } else {
            searchEmployee();
        }
        search.setText(null);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseEntered
        btnSearch.setBackground(new java.awt.Color(86, 109, 148));
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_btnSearchMouseEntered

    private void btnSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseExited
        btnSearch.setBackground(new java.awt.Color(87, 101, 116));
        btnSearch.setForeground(new java.awt.Color(74, 209, 161));
    }//GEN-LAST:event_btnSearchMouseExited

    private void btnCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCategoryMouseClicked
        newcolor(btnCategory);
        resetcolor(btnMember);
        resetcolor(btnPublisher);
        resetcolor(btnBorrow);
        resetcolor(btnBook);
        resetcolor(btnEmployee);
        publisher.setVisible(false);
        member.setVisible(false);
        borrow.setVisible(false);
        book.setVisible(false);
        employee.setVisible(false);
        category.setVisible(true);
        btnDone.setEnabled(false);
        btnEdit.setEnabled(true);
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_btnCategoryMouseClicked

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        dispose();
        login l = new login();
        l.setVisible(true);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnDoneMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDoneMouseEntered
        hovercolor(btnDone);
    }//GEN-LAST:event_btnDoneMouseEntered

    private void btnDoneMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDoneMouseExited
        defaultcolor(btnDone);
    }//GEN-LAST:event_btnDoneMouseExited

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        if (borrow.isVisible() && !tableBorrow.getSelectionModel().isSelectionEmpty()) {
            int tabelData = tableBorrow.getSelectedRow();
            String sql = "UPDATE borrows SET status=1 where id=?";
            try {
                java.sql.Connection conn = (Connection) connection.configDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.setString(1, tableBorrow.getValueAt(tabelData, 0).toString());
                pst.execute();
                JOptionPane.showMessageDialog(this, "Buku telah dikembalikan");
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            loadBorrowTable();
        }
    }//GEN-LAST:event_btnDoneActionPerformed

    private void btnPublisherMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPublisherMouseClicked
        newcolor(btnPublisher);
        resetcolor(btnMember);
        resetcolor(btnCategory);
        resetcolor(btnBorrow);
        resetcolor(btnBook);
        resetcolor(btnEmployee);
        publisher.setVisible(true);
        member.setVisible(false);
        borrow.setVisible(false);
        book.setVisible(false);
        employee.setVisible(false);
        category.setVisible(false);
        btnDone.setEnabled(false);
        btnEdit.setEnabled(true);
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_btnPublisherMouseClicked
    private void searchCategory() {
        String cari = search.getText();

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Id");
        model.addColumn("Nama Kategori");

        try {
            String sql = "SELECT * FROM categories WHERE "
                    + "id like '%" + cari + "%' "
                    + "OR name like '%" + cari + "%' "
                    + "ORDER BY id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("id"), res.getString("name")});
            }
            tablePublisher.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void searchPublisher() {
        String cari = search.getText();

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Nama Penerbit");
        model.addColumn("Alamat");
        model.addColumn("No. HP");

        try {
            String sql = "SELECT * FROM publishers WHERE "
                    + "id like '%" + cari + "%' "
                    + "OR name like '%" + cari + "%' "
                    + "OR address like '%" + cari + "%' "
                    + "OR phone like '%" + cari + "%' "
                    + "ORDER BY id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("id"), res.getString("name"), res.getString("address"), res.getString("phone")});
            }
            tablePublisher.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void searchBorrow() {
        String cari = search.getText();

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Judul Buku");
        model.addColumn("Peminjam");
        model.addColumn("Petugas");
        model.addColumn("Tanggal Pinjam");
        model.addColumn("Tanggal Kembali");
        model.addColumn("Status");

        try {
            String sql = "SELECT * FROM borrows br JOIN books b ON br.book_id = b.id LEFT JOIN employees e ON br.employee_id = e.id JOIN members m ON br.member_id = m.id WHERE "
                    + "br.id like '%" + cari + "%' "
                    + "OR b.title like '%" + cari + "%' "
                    + "OR m.name like '%" + cari + "%' "
                    + "OR e.name like '%" + cari + "%' "
                    + "OR br.borrow_date like '%" + cari + "%' "
                    + "OR br.return_date like '%" + cari + "%' "
                    + "ORDER BY br.status asc";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                String status = "Belum Kembali";
                if (res.getBoolean("br.status")) {
                    status = "Kembali";
                }
                model.addRow(new Object[]{res.getString("br.id"), res.getString("b.title"), res.getString("m.name"), res.getString("e.name"), res.getString("br.borrow_date"), res.getString("br.return_date"), status});
            }
            tableBorrow.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void searchEmployee() {
        String cari = search.getText();

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Id");
        model.addColumn("Nama Pegawai");
        model.addColumn("Email");
        model.addColumn("No. HP");
        model.addColumn("Alamat");

        try {
            String sql = "SELECT * FROM employees e JOIN users u ON e.user_id = u.id WHERE "
                    + "e.id like '%" + cari + "%' "
                    + "OR e.name like '%" + cari + "%' "
                    + "OR u.email like '%" + cari + "%' "
                    + "OR e.phone like '%" + cari + "%' "
                    + "OR e.address like '%" + cari + "%' "
                    + "ORDER BY e.id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("e.id"), res.getString("e.name"), res.getString("u.email"), res.getString("e.phone"), res.getString("e.address")});
            }
            tableEmployee.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void searchBook() {
        String cari = search.getText();

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Kode Buku");
        model.addColumn("Judul Buku");
        model.addColumn("Penerbit");
        model.addColumn("Pengarang");
        model.addColumn("Tahun Terbit");
        model.addColumn("Kategori");
        model.addColumn("Jumlah");

        try {
            String sql = "SELECT * FROM books b JOIN categories c ON b.category_id = c.id JOIN publishers p ON b.publisher_id = p.id WHERE "
                    + "b.id like '%" + cari + "%' "
                    + "OR b.title like '%" + cari + "%' "
                    + "OR p.name like '%" + cari + "%' "
                    + "OR b.author like '%" + cari + "%' "
                    + "OR b.year like '%" + cari + "%' "
                    + "OR c.name like '%" + cari + "%' "
                    + "ORDER BY b.id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("b.id"), res.getString("b.title"), res.getString("p.name"), res.getString("b.author"), res.getString("b.year"), res.getString("c.name"), res.getString("b.qty")});
            }
            tableBook.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void searchMember() {
        String cari = search.getText();

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Id");
        model.addColumn("Nama Member");
        model.addColumn("Email");
        model.addColumn("No. HP");
        model.addColumn("Alamat");

        try {
            String sql = "SELECT * FROM members m JOIN users u ON m.user_id = u.id WHERE "
                    + "m.id like '%" + cari + "%' "
                    + "OR m.name like '%" + cari + "%' "
                    + "OR u.email like '%" + cari + "%' "
                    + "OR m.phone like '%" + cari + "%' "
                    + "OR m.address like '%" + cari + "%' "
                    + "ORDER BY m.id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("m.id"), res.getString("m.name"), res.getString("u.email"), res.getString("m.phone"), res.getString("m.address")});
            }
            tableMember.setModel(model);
        } catch (SQLException e) {
        }
    }

//------------------------------------LOAD TABLE------------------------------
    private void loadPublisherTable() {
        tablePublisher.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 14));
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Nama Penerbit");
        model.addColumn("Alamat");
        model.addColumn("No. HP");

        try {
            String sql = "SELECT * FROM publishers"
                    + " ORDER BY id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("id"), res.getString("name"), res.getString("address"), res.getString("phone")});
            }
            tablePublisher.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void loadBorrowTable() {
        tableBorrow.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 14));
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Judul Buku");
        model.addColumn("Peminjam");
        model.addColumn("Petugas");
        model.addColumn("Tanggal Pinjam");
        model.addColumn("Tanggal Kembali");
        model.addColumn("Status");

        try {
            String sql = "SELECT * FROM borrows br"
                    + " JOIN books b ON br.book_id = b.id"
                    + " LEFT JOIN employees e ON br.employee_id = e.id"
                    + " JOIN members m ON br.member_id = m.id"
                    + " ORDER BY br.status ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                String status = "Belum Kembali";
                if (res.getBoolean("br.status")) {
                    status = "Kembali";
                }
                model.addRow(new Object[]{res.getString("br.id"), res.getString("b.title"), res.getString("m.name"), res.getString("e.name"), res.getString("br.borrow_date"), res.getString("br.return_date"), status});
            }
            tableBorrow.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void loadEmployeeTable() {
        tableEmployee.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 14));
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Id");
        model.addColumn("Nama Pegawai");
        model.addColumn("Email");
        model.addColumn("No. HP");
        model.addColumn("Alamat");

        try {
            String sql = "SELECT * FROM employees e"
                    + " JOIN users u ON e.user_id = u.id"
                    + " ORDER BY e.id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("e.id"), res.getString("e.name"), res.getString("u.email"), res.getString("e.phone"), res.getString("e.address")});
            }
            tableEmployee.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void loadCategoryTable() {
        tableCategory.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 14));
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Id");
        model.addColumn("Nama Kategori");

        try {
            String sql = "SELECT * FROM categories"
                    + " ORDER BY id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("id"), res.getString("name")});
            }
            tableCategory.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void loadBookTable() {
        tableBook.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 14));
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Kode Buku");
        model.addColumn("Judul Buku");
        model.addColumn("Penerbit");
        model.addColumn("Pengarang");
        model.addColumn("Tahun Terbit");
        model.addColumn("Kategori");
        model.addColumn("Jumlah");

        try {
            String sql = "SELECT * FROM books b"
                    + " JOIN categories c ON b.category_id = c.id"
                    + " JOIN publishers p ON b.publisher_id = p.id"
                    + " ORDER BY b.id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("b.id"), res.getString("b.title"), res.getString("p.name"), res.getString("b.author"), res.getString("b.year"), res.getString("c.name"), res.getString("b.qty")});
            }
            tableBook.setModel(model);
        } catch (SQLException e) {
        }
    }

    private void loadMemberTable() {
        tableMember.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 14));
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Id");
        model.addColumn("Nama Member");
        model.addColumn("Email");
        model.addColumn("No. HP");
        model.addColumn("Alamat");

        try {
            String sql = "SELECT * FROM members m"
                    + " JOIN users u ON m.user_id = u.id"
                    + " ORDER BY m.id ASC";
            java.sql.Connection conn = (Connection) connection.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addRow(new Object[]{res.getString("m.id"), res.getString("m.name"), res.getString("u.email"), res.getString("m.phone"), res.getString("m.address")});
            }
            tableMember.setModel(model);
        } catch (Exception e) {
        }
    }

//----------SET BUTTON COLOR----------------
    public void hovercolor(javax.swing.JButton btn) {
        btn.setBackground(new java.awt.Color(0, 187, 150));
    }

    public void defaultcolor(javax.swing.JButton btn) {
        btn.setBackground(new java.awt.Color(74, 209, 161));
    }

//----------SET LABEL COLOR-----------------
    public void newcolor(javax.swing.JLabel lbl) {
        lbl.setBackground(new java.awt.Color(0, 187, 150));
    }

    public void resetcolor(javax.swing.JLabel lbl) {
        lbl.setBackground(new java.awt.Color(74, 209, 161));
    }

    //-----------View Login Account--------------
    public int employeeId;
    public String employeeName;

    public void viewData() {
        userName.setText(employeeName);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainMenuEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainMenuEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainMenuEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainMenuEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainMenuEmployee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel book;
    private javax.swing.JPanel borrow;
    private javax.swing.JButton btnAdd;
    private javax.swing.JLabel btnBook;
    private javax.swing.JLabel btnBorrow;
    private javax.swing.JLabel btnCategory;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnEdit;
    private javax.swing.JLabel btnEmployee;
    private javax.swing.JButton btnLogout;
    private javax.swing.JLabel btnMember;
    private javax.swing.JLabel btnPublisher;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel category;
    private javax.swing.JPanel employee;
    private javax.swing.JPanel heading;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel member;
    private javax.swing.JPanel publisher;
    private javax.swing.JTextField search;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTable tableBook;
    private javax.swing.JTable tableBorrow;
    private javax.swing.JTable tableCategory;
    private javax.swing.JTable tableEmployee;
    private javax.swing.JTable tableMember;
    private javax.swing.JTable tablePublisher;
    private javax.swing.JLabel userName;
    // End of variables declaration//GEN-END:variables
}
